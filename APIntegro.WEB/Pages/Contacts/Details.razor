@page "/Contact/Details/{id}"
@using APIntegro.Domain.Entities
@inject APIntegro.WEB.Interfaces.IContactService _contactService
@inject AutoMapper.IMapper _mapper
@inject ISnackbar Snackbar
@inject APIntegro.WEB.Data.LoginSession Session


<div class="d-flex align-items-center justify-content-center">
    <RadzenCard class="rz-shadow-12 rz-border-radius-6 mb-5 col-xl-8 col-lg-10 col-md-10 col-12">
        <h1 class="text-center">Contact Details</h1>
    </RadzenCard>
</div>
<EditForm Model="Contact" OnValidSubmit="@Update">
    <DataAnnotationsValidator />

    <div class="d-flex justify-content-center">
        <RadzenCard class="rz-shadow-12 rz-border-radius-6 rz-p-8 col-xl-8 col-lg-10 col-md-10 col-12">

            <div class="row mb-3">
                <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12 mb-3">
                    <RadzenColumn>
                        <MudTextField Variant="MudBlazor.Variant.Outlined" Class="mb-1" Label="First Name" @bind-Value="Contact.firstname" />
                        <ValidationMessage For="@(() => Contact.firstname)" />
                    </RadzenColumn>
                </div>
                <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12 mb-3">
                    <RadzenColumn>
                        <MudTextField Variant="MudBlazor.Variant.Outlined" Class="mb-1" Label="Last Name" @bind-Value="Contact.lastname" />
                        <ValidationMessage For="@(() => Contact.lastname)" />
                    </RadzenColumn>
                </div>
            </div>

            <div class="row">
                <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12 mb-3">
                    <RadzenColumn>
                        <MudTextField Variant="MudBlazor.Variant.Outlined" Class="mb-1" Label="Phone Number" @bind-Value="Contact.phone" />
                        <ValidationMessage For="@(() => Contact.phone)" />
                    </RadzenColumn>
                </div>
                <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12 mb-3">
                    <RadzenColumn>
                        <MudTextField Variant="MudBlazor.Variant.Outlined" Class="mb-1" Label="Email" @bind-Value="Contact.email" />
                        <ValidationMessage For="@(() => Contact.email)" />
                    </RadzenColumn>
                </div>
            </div>

            <div class="row">
                <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12 mb-3">
                    <RadzenColumn>
                        <MudDatePicker Variant="MudBlazor.Variant.Outlined" Class="mb-1" Label="Birthday" DateFormat="dd/MM/yyyy" @bind-Date="@Birthday" @onfocusout="(() => Contact.birthday = Birthday.ToString())" />
                        <ValidationMessage For="@(() => Contact.birthday)" />
                    </RadzenColumn>
                </div>
                <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12 mb-3">
                    <RadzenColumn>
                        <MudSelect Variant="MudBlazor.Variant.Outlined" Class="mb-1" Label="Department" AnchorOrigin="Origin.BottomCenter" @bind-Value="Contact.department" T="string">
                            @foreach (var item in Departments)
                            {
                                <MudSelectItem Value="@item" T="string" />
                            }
                        </MudSelect>
                        <ValidationMessage For="@(() => Contact.department)" />
                    </RadzenColumn>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <MudButton ButtonType="MudBlazor.ButtonType.Submit"
                               Class="mr-2"
                               Variant="MudBlazor.Variant.Filled"
                               StartIcon="@BtnIcon"
                               Color="Color.Success">
                        @if (_isLoading)
                        {
                            <MudProgressCircular Color="Color.Default" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Updating...</MudText>
                        }
                        else
                        {
                            <MudText>Update</MudText>
                        }
                    </MudButton>

                    <MudLink Href="/Contact">
                        <MudButton Variant="MudBlazor.Variant.Filled"
                                   StartIcon="@Icons.Material.Filled.Backspace"
                                   Color="Color.Dark">Cancel</MudButton>
                    </MudLink>
                </div>
            </div>

        </RadzenCard>
    </div>
</EditForm>


@code {
    [Parameter]
    public string id { get; set; }

    Contact? Contact = new();
    DateTime? Birthday;
    private List<string> Departments = new() { "Human Resources", "Finance", "Marketing", "Sales", "IT", "Operations", "Customer Support", "Research and Development", "Salesforce Administration" };

    private bool _isLoading;
    private string BtnIcon = Icons.Material.Filled.Sync;

    protected override async Task OnInitializedAsync()
    {
        Contact = await _contactService.FindContact(id);

        Birthday = !string.IsNullOrEmpty(Contact.birthday) ? Convert.ToDateTime(Contact.birthday) : null;

        await base.OnInitializedAsync();
    }
}